#!/usr/bin/env perl

use strict;
use warnings;
use autodie;
use Cwd 'getcwd';
use File::Temp 'tempdir';
use Getopt::Long qw(:config auto_help pass_through);
use Pod::Usage;

GetOptions() or pod2usage();

die "$0 needs to run with root privileges\n" if $> != '0';

my @explicit = @ARGV;
my $cfg = '/etc/deb-packages';
my (@src, @bin);

open my $fh, '<', $cfg;
while (my $line = <$fh>) {
    chomp $line;

    if (my ($src, $bin_list) = $line =~ /^([^#\s]+): (.+?)\s*(?:$|#)/) {
        my @packages = split /\s/, $bin_list;
        push @src, [$src, \@packages];
    }
    elsif ($line =~ /^([^#\s]+)/) {
        push @bin, $1;
    }
}

if (!@explicit) {
    system "aptitude install @bin";
}

if (@src) {
    my $old_dir = getcwd() or die "Can't get current directory\n";
    my $build_dir = tempdir('install-deb-packages.XXXXX',
                            TMPDIR  => 1,
                            CLEANUP => 1);
    chdir $build_dir;
    for my $source (@src) {
        my ($src_pack, $bin_packs) = @$source;

        if (@explicit) {
            next if !grep { $_ eq $src_pack } @explicit;
        }
        else {
            next if are_installed(@$bin_packs);
        }

        system "aptitude build-dep $src_pack";
        system "apt-get source -b $src_pack";
        for my $binary (@$bin_packs) {
            my $deb = (glob "${binary}_*.deb")[0];
            system "dpkg -i $deb";
        }
    }
    chdir $old_dir;
}

sub are_installed {
    my @packages = @_;
    no autodie 'system';
    for my $package (@packages) {
        return 0 if system qq/aptitude show $package|grep -q "^State: installed"/;
    }
    return 1;
}

=encoding utf8

=head1 NAME

install-deb-packages - Install Debian packages listed in /etc/deb-packages

=head1 SYNOPSIS

Simply run B<install-deb-packages> without arguments and it will install all
the Debian packages in F</etc/deb-packages> which have not been installed yet.

As arguments, you can supply names of source packages you wish to
recompile/install.
