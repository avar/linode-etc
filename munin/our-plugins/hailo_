#!/home/v-perlbrew/perl5/perlbrew/bin/perl
use lib '/usr/share/perl5';
use 5.010;
use autodie;
use Any::Moose;
use Hailo;
use JSON;
use File::Slurp qw/ slurp /;
use Sys::Hostname qw/ hostname /;
use Time::HiRes qw/ gettimeofday tv_interval /;

=head1 NAME

hailo_ - Print information about a Hailo brain

=head1 SYNOPSIS

When you have a brain locally:

    # Simple
    $ brain=~/g/bot-twatterhose/twatterhose.brn name=Twatterhose perl /etc/munin/our-plugins/hailo_

To transmit statistics to a remote machine:

    # Dumping
    brain=~/g/bot-twatterhose/twatterhose.brn name=Twatterhose mode=dump file=/tmp/hailo.json perl /etc/munin/our-plugins/hailo_
    cat /tmp/hailo.json

Load load remote statistics:

    # Loading
    brain=~/g/bot-twatterhose/twatterhose.brn name=Twatterhose mode=load file=/tmp/hailo.json perl /etc/munin/our-plugins/hailo_

To get info about reply times just supply C<test=time> (C<test=stats>
is the default>).

=head1 Host -> Munin

Set something like this up in cron:

    # Brain stats
    brain=~/failo.failo.brn name=Failo test=stats mode=dump file=/tmp/hailo-stats.json perl /etc/munin/our-plugins/hailo_
    ssh v "cat > ~failo/failo/munin/hailo-stats.json.tmp && mv ~failo/failo/munin/hailo-stats.json.tmp ~failo/failo/munin/hailo-stats.json" < /tmp/hailo-stats.json

    # Time stats
    brain=~/failo.failo.brn name=Failo test=time mode=dump file=/tmp/hailo-time.json perl /etc/munin/our-plugins/hailo_
    ssh v "cat > ~failo/failo/munin/hailo-time.json.tmp && mv ~failo/failo/munin/hailo-time.json.tmp ~failo/failo/munin/hailo-time.json" < /tmp/hailo-time.json

=cut

my $brain = $ENV{brain};
my $name  = $ENV{name} // $brain;
my $mode  = $ENV{mode} // "simple";
my $test  = $ENV{test} // "stats";
my $times = $ENV{times} // 100;
my $file  = $ENV{file};

given ($ARGV[0]) {
    when ("config") {
        given ($test) {
            when ('stats') {
                print <<"END";
graph_title Hailo statistics for $name
graph_args --base 1000 -l 0
graph_vlabel count
graph_category hailo
graph_info Statistics about the $name Hailo brain

next_tokens.label next tokens
next_tokens.type GAUGE
next_tokens.info The number of next_tokens in the brain

prev_tokens.label prev tokens
prev_tokens.type GAUGE
prev_tokens.info The number of prev_tokens in the brain

expressions.label expressions
expressions.type GAUGE
expressions.info The number of expressions in the brain

tokens.label tokens
tokens.type GAUGE
tokens.info The number of tokens in the brain
END
            }
            when ('time') {
                print <<"END";
graph_title Hailo reply time for $name
graph_args --base 1000 -l 0
graph_vlabel millisecods
graph_category hailo
graph_info The time it takes the $name Hailo brain to make $times replies

time.label time
time.type GAUGE
time.info The time it took the brain to generate $times replies
END
            }
            default {
                die "Unknown test $test";
            }
        }
    }
    default {
        given ($mode) {
            when ('simple') {
                my $stats = get_stats($brain);
                say_stats($stats);
            }
            when ('dump') {
                my $stats = get_stats($brain);
                open my $fh, ">", $file;
                $stats->{_program} = $0;
                $stats->{_time} = time;
                $stats->{_hostname} = hostname();
                say $fh encode_json($stats);
                close $fh;
            }
            when ('load') {
                my $cont = slurp $file;
                my $stats = decode_json($cont);
                say_stats($stats);
            }
            default {
                die "Unknown mode $mode";
            }
        }
    }
}

sub get_stats {
    my ($brain) = @_;
    my %stats;
    my $hailo = Hailo->new(brain => $brain);

    given ($test) {
        when ('stats') {
            @stats{qw/tokens expressions prev_tokens next_tokens/} = $hailo->stats;
        }
        when ('time') {
            # One reply to set up DB connections etc.
            $hailo->reply();

            my $start_time = [gettimeofday()];
            for (1 .. $times) {
                my $reply = $hailo->reply();
                die "Didn't get a reply" unless defined $reply;
            }
            my $elapsed = tv_interval($start_time);

            $stats{time} = int $elapsed * 1_000;
            $stats{_times} = $times;
        }
        default {
            die "Unknown test $test";
        }
    }

    return \%stats;
}

sub say_stats {
    my ($stats) = @_;
    for my $key (sort keys %$stats) {
        next if $key =~ /^_/;
        say "$key.value $stats->{$key}";
    }
    return;
}
