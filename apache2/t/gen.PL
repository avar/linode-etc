#!/usr/bin/env perl
use 5.010;
use autodie qw[:all];
use strict;
use FindBin qw[$Bin];
use File::Path qw[remove_tree make_path];
use Data::Dumper 'Dumper';

$Data::Dumper::Terse = 1;

remove_tree("$Bin/gen");

# All enabled sites in apache
chomp(my @ServerName = qx[ ack -h --follow 'ServerName\\s+(\\S+)' --output '\$1' /etc/apache2/sites-enabled/ 2>/dev/null | sort ]);

# All enabled aliases in apache
chomp(my @ServerAlias = qx[ ack -h --follow 'ServerAlias\\s+(.*)' --output '\$1'  /etc/apache2/sites-enabled/ 2>/dev/null | sort ]);
# Some have multiple aliases
@ServerAlias = map { split /\s+/, $_ } @ServerAlias;

# All enabled sites
my %sites_enabled;
@sites_enabled{@ServerName, @ServerAlias} = ();

my $TEMPLATE = <<"TEMPLATE";
#!$^X
# DO NOT EDIT, AUTOGENERATED
use strict;
use warnings;
use FindBin qw[\$Bin];
use lib qq[\$Bin/../../lib];
use WebTest;
TEMPLATE

# The domain tests
sub and_www { map { $_, "www.$_" } @_ }

my @tests = (
    'ap.nix.is'                => {
        content_like => qr/This server could not verify/,
        success      => 0,
        follow_links => 0,
    },
    'awstats.nix.is'           => qr/Awstats/,
    'blog.nix.is'              => {
        content_like => qr/literal thoughts/,
        # Due to broken S26 link
        follow_links => 0,
    },
    'git.nix.is'               => {
        content_like => qr/GitHub/,
        base_url     => "http://github.com/avar",
        follow_links => 0,
    },
    'grault.net'               => qr/Gosling Emacs documentation/,
    'hailo.nix.is'             => qr/Hailo Chat/,
    'hw.mw.dev.avar.nix.is'    => {
        content_like => qr/MediaWiki/,
        base_url     => "http://hw.mw.dev.avar.nix.is/index.php/Hauptseite",
    },
    'leech.nix.is'             => qr/wTorrent/,
    'lists.nix.is'             => qr/Mailman/,
    'localhost'                => {
        content_like => qr/How do I runned vee nix\?/,
        follow_links => 0,
    },
    'v.nix.is'                 => {
        content_like => qr/How do I runned vee nix\?/,
        follow_links => 0,
    },
    'munin.nix.is'             => qr/Munin/,
    'nix.is'                   => {
        content_like => qr/logo\.png/,
        follow_links => 0,
    },
    'noc.nix.is'               => qr/Network operations/,
    'osm.nix.is'               => qr/Garmin map of Iceland/,
    'smoke.git.nix.is'         => {
        content_like => qr/Increase the visibility of your Smoke Tests/,
        base_url     => "http://smoke.git.nix.is/app",
    },
    'tms.nix.is'               => qr/Tumi/,
    'trunk.mw.dev.avar.nix.is' => {
        content_like => qr/MediaWiki/,
        follow_links => 0,
    },
    'tumi.nix.is'              => qr/Tumi/,

    'vnstat.nix.is'            => qr/vnstat\.cgi/,

    'chanmirror.nix.is'        => qr[Index of /],
    'ci.nix.is'                => qr/Powered by phpBB/,

    [ and_www qw/hailo.org/ ]  => {
        content_like => qr/Hailo is a a pluggable/,
        base_url     => "http://hailo.github.com/",
    },

    # Ævar
    [ and_www qw(aevar.net xn--var-xla.net) ] => qr/Bjarmason/,
    [ and_www qw(hjolavefsja.is xn--hjlavefsj-81a4q.is) ] => qr/Fyrirspurnir um verkefni/,

    # Vélfag
    [ and_www qw/velfag.is xn--vlfag-bsa.is/ ]  => qr/MediaWiki/,
    [ qw/dev.velfag.is dev.xn--vlfag-bsa.is/ ]  => qr/MediaWiki/,

    # Earle
    [ and_www qw/voodootronix.com/ ] => qr/voodootronix/,
    'hex.downlode.org'               => qr/Go here/,
    'downlode.org'                   => qr/downlode/,

);

# Generate expanded tests for Perl
my %tests;
while (my ($domain, $tests) = splice @tests, 0, 2) {
    my @d = ref $domain eq 'ARRAY' ? @$domain : $domain;
    for my $d (@d) {
        $tests{$d} = $tests;
    }
}

while (my ($domain, $tests) = each %tests) {

    if (ref $tests eq 'Regexp') {
        # Just a basic test
        $tests = {
            content_like => $tests,
        };
    }

    # Should be OK by default
    $tests->{success}      = 1 unless exists $tests->{success};
    $tests->{follow_links} = 1 unless exists $tests->{follow_links};

    my $args = Dumper($tests);
    for my $t (qw(content_like base_is follow_links)) {
        my $dashy = $t; $dashy =~ s/_/-/g;

        my $test = <<TEST;
$TEMPLATE
my \$tests = $args;
WebTest->new(
    domain       => q[$domain],
    %\$tests,
)->run_${t}_tests;
TEST
        my $dir = "$Bin/gen/$domain";
        make_path($dir);
        open my $th, ">", "$dir/$dashy.t";
        print $th $test;
        close $th;
    }

    # We've tested this one
    delete $sites_enabled{$domain};
}

for my $domain (sort keys %sites_enabled) {
    my $test = <<TEST;
$TEMPLATE
WebTest->new(
    domain       => q[$domain],
)->run_todo_test;
TEST
    my $dir = "$Bin/gen/$domain";
    make_path($dir);
    open my $th, ">", "$dir/TODO.t";
    print $th $test;
    close $th;
}
