#!/usr/bin/env perl
use 5.010;
use autodie qw[:all];
use strict;
use FindBin qw[$Bin];
use File::Path qw[remove_tree make_path];

chomp(my @domains = qx[ grep -h ORIGIN /etc/bind/master/master* | $^X -pe 's/^.*? (.*?)\.\$/\$1/' ]);
my @ns = (qw(localhost), map { "ns$_.linode.com" } 1..5);

my @subdomain_tests = qw(A NS MX);
my @domain_tests    = ("SOA", @subdomain_tests, "AXFR");

remove_tree("$Bin/gen");

# Check slaves against localhost
for my $domain (@domains) {
    my @tests = is_subdomain($domain) ? @subdomain_tests : @domain_tests;

    for my $ns (@ns[1..$#ns]) {
        my $test = <<TEST;
#!$^X
# DO NOT EDIT, AUTOGENERATED
use FindBin qw[\$Bin];
use lib qq[\$FindBin::Bin/../../lib];
use DomainTest;
DomainTest->new(
    domain  => q[$domain],
    servers => [ qw[ $ns[0] $ns ] ],
    tests   => [ qw[ @tests ] ],
)->run_tests;
TEST
        my $dir = "$Bin/gen/$ns";
        make_path($dir);
        open my $th, ">", "$dir/$domain.t";
        print $th $test;
        close $th;
    }
}

# Sanity check that the public servers have a NS record like ours
for my $domain (@domains) {
    next if is_subdomain($domain);

    my $test = <<TEST;
# DO NOT EDIT, AUTOGENERATED
use FindBin qw[\$Bin];
use lib qq[\$FindBin::Bin/../../lib];
use DomainTest;
DomainTest->new(
    domain  => q[$domain],
    servers => [ 'resolver1.london.linode.com.', qw[ @ns ] ],
    recurse => 1,
)->run_public_tests;
TEST
    my $dir = "$Bin/gen/public";
    make_path($dir);
    open my $th, ">", "$dir/$domain.t";
    print $th $test;
    close $th;
}

sub is_subdomain
{
    my $domain = shift;
    my $dots  = () = $domain =~ /\./g;

    $dots != 1;
}
